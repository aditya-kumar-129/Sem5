#include <bits/stdc++.h>
using namespace std;
#define MAX 999

void dij(int n, int source, int cost[10][10], int dist[])
{
  int flag[10] = {0};
  for (int i = 0; i < n; i++)
    dist[i] = cost[source][i];
  int count = 1;
  while (count < n)
  {
    int min = 99, index;
    for (int i = 0; i < n; i++)
      if (dist[i] < min && !flag[i])
      {
        min = dist[i];
        index = i;
      }
    count++;
    flag[index]=1;
    for(int i=0;i<n;i++)
      if(dist[index]+ cost[index][i]<dist[i] && !flag[i])
        dist[i]=dist[index]+ cost[index][i];
  }
}
int main()
{
  cout << "Enter the number of nodes:- ";
  int n;
  cin >> n;
  cout << "Enter the cost matrix:- \n";
  int cost[10][10];
  int dist[10];
  for (int i = 0; i < n; i++)
    for (int j = 0; j < n; j++)
    {
      cin >> cost[i][j];
      if (cost[i][j] == 0 && i != j)
        cost[i][j] = MAX;
    }
  cout << "Enter the source vertex:- ";
  int source;
  cin >> source;
  dij(n, source, cost, dist);
  for (int i = 0; i < n; i++)
    if (i != source)
      cout << source << "--->" << i << " = " << dist[i] << endl;
  return 0;
}

#include<bits/stdc++.h>
using namespace std;

int main()
{
  cout<<"Enter the bucket size:- ";
  int bucket_size;
  cin>>bucket_size;
  cout<<"Enter the output rate:- ";
  int output_rate;
  cin>>output_rate;
  cout<<"Enter the value of n:- ";
  int n;
  cin>>n;
  int arr[n]={0};
  for(int i=0;i<n;i++)
    cin>>arr[i];
  cout<<"Second\tIncoming\tOutgoing\tDropped\tinBucket\n";
  int count=0,drop=0;
  for(int i=0;count||i<n;i++)
  {
    cout<<"    "<<i+1<<"\t";
    cout<<arr[i]<<"\t";
    cout<<min((arr[i]+count),output_rate)<<"\t";
    int x = arr[i] + count - output_rate;
    if(x>0)
    {
      if(x>bucket_size)
      {
        count=bucket_size;
        drop=x-bucket_size;
      }
      else
      {
        count=x;
        drop=0;
      }
    }
    else
    {
      count=0;
      drop=0;
    }
    cout<<drop<<"\t"<<count<<endl;
  }
}

#include <bits/stdc++.h>
using namespace std;
int front_hp = -1, rear_hp = -1, front_lp = -1, rear_lp = -1;
#define MAX 25
int queue_hp[MAX], queue_lp[MAX];
void Insert()
{
  cout << "Enter the element to be inserted :- ";
  int ele;
  cin >> ele;
  cout << "Press 1 to insert in High Priority Queue OR 0 to insert in Low Priority Queue:- ";
  int choice;
  cin >> choice;
  if (choice == 1)
  {
    if (rear_hp == MAX - 1)
      cout << "Queue overflow can't insert the element:(\n";
    if (front_hp == -1)
      front_hp++;
    queue_hp[++rear_hp] = ele;
    cout << "ELement inserted successfully in High Priority Queue\n";
  }
  else
  {
    if (rear_lp == MAX - 1)
      cout << "Queue overflow can't insert the element:(\n";
    if (front_lp == -1)
      front_lp++;
    queue_lp[++rear_lp] = ele;
    cout << "ELement inserted successfully in Low Priority Queue\n";
  }
}
void delete_q()
{
  if (front_hp == -1 || front_hp > rear_hp)
  {
    cout << "High Priority Queue is empty\n";
    if (front_lp == -1 || front_lp > rear_lp)
      cout << "Low Priority Queue is empty\n";
    else
    {
      cout << "Deleting element form Low Priority Queue\n";
      cout << "Element to be deleted is :- " << queue_lp[front_lp++]<<endl;
    }
  }
  else
  {
    cout << "Deleting element form High Priority Queue\n";
    cout << "Element to be deleted is :- " << queue_hp[front_hp++]<<endl;
  }
}
void display()
{
  if(front_hp == -1 || front_hp > rear_hp)
    cout<<"High Priority Queue is empty\n";
  else
  {
    cout<<"Displaying the content of High Priority Queue:- \n";
    for(int i=front_hp;i<=rear_hp;i++)
      cout<<queue_hp[i]<<" ";
  }
  cout<<endl;
  if(front_lp == -1 || front_lp > rear_lp)
    cout<<"Low Priority Queue is empty\n";
  else
  {
    cout<<"Displaying the content of Low Priority Queue:- \n";
    for(int i=front_lp;i<=rear_lp;i++)
      cout<<queue_lp[i]<<" ";
  }
  cout<<endl;
}
int main()
{
  while (1)
  {
    cout << "Enter the corresponding number to perform the corresponding operation\n";
    cout << "1.)Insert\n2.)Delete\n3.)Display\n4.)exit\n";
    cout << "Enter the choice:- ";
    int choice;
    cin >> choice;
    switch (choice)
    {
    case 1:
      Insert();
      break;
    case 2: // delete is a c++ keyword so you can't use them
      delete_q();
      break;
    case 3:
      display();
      break;
    case 4:
      cout << "Existing the program.";
      exit(0);
      break;
    default:
      cout << "Enter valid choice:(" << endl;
      break;
    }
  }
}

#include<bits/stdc++.h>
using namespace std;
int main()
{
  cout<<"Enter the window size:- ";
  int window_size;
  cin>>window_size;
  cout<<"Enter the total number of frames to be send:- ";
  int no_of_frames;
  cin>>no_of_frames;
  cout<<"Enter the frame value:-\n";
  int frames[no_of_frames];
  for(int i=0;i<no_of_frames;i++)
    cin>>frames[i];
  for(int i=0;i<no_of_frames;i++)
  {
    if((i+1)%window_size==0)
    {
      cout<<frames[i]<<" ";
      cout<<"\nAcknowledgement recived for all the above frames\n";
    }

    else
      cout<<frames[i]<<" ";
  }
  if(no_of_frames%window_size!=0)
    cout<<"Acknowledgement recived for all the above frames\n";
}


#include <bits/stdc++.h>
using namespace std;
string XOR(string a, string b)
{
  string ans = "";
  int n = b.length();
  for (int i = 1; i < n; i++) // i should initialised from 1 (IMPORTANT)
  {
    if (a[i] == b[i])
      ans += '0';
    else
      ans += '1';
  }
  return ans;
}
string mod2(string data, string key)
{
  int pick = key.length();
  int len = data.length();
  string temp = data.substr(0, pick);
  while (pick < len)
  {
    if (temp[0] == '1')
      temp = XOR(key, temp) + data[pick];
    else
      temp = XOR(std::string(pick, '0'), temp) + data[pick];
    pick++;
  }
  if (temp[0] == '1')
    temp = XOR(key, temp);
  else
    temp = XOR(std::string(pick, '0'), temp);
  return temp;
}
string encodeData(string data, string key)
{
  int len = key.length();
  string augData = data + std::string(len - 1, '0');
  string remain = mod2(augData, key);
  string encoded_data = data + remain;
  cout << "Remainder at encoded side :- " << remain << endl;
  cout << "Encoded Dataword at sender side is :- " << encoded_data << endl;
  return encoded_data;
}
void decodedData(string data, string key)
{
  string remain = mod2(data, key);
  cout << "Remainder at Receiver side is:- " << remain << endl;
  int count = 0;
  for (int i = 0; i < remain.length(); i++)
    if (remain[i] == '1')
      count++;
  if (count == 0)
    cout << "No error occured during transmission side\n";
  else
    cout << "Error occured during transmission side\n";
}
int main()
{
  cout << "Enter the data:- ";
  string data;
  cin >> data;
  cout << "Enter the key:- ";
  string key;
  cin >> key;
  string encode_data = encodeData(data, key);
  cout << "Enter the number of bits you want to corrupt:- ";
  int n;
  cin >> n;
  for (int i = 0; i < n; i++)
  {
    cout << "Enter the position to alter the bit:- ";
    int pos;
    cin >> pos;
    if (encode_data[pos] == '0')
      encode_data[pos] = '1';
    else
      encode_data[pos] = '0';
  }
  cout << "Encoded data to be sent to Receiver is :- " << encode_data << endl;
  decodedData(encode_data, key);
}

#include<bits/stdc++.h>
using namespace std;
int checksum(int fl)
{
  char in[50];
  cin>>in;
  int n;
  if(strlen(in)%2!=0)
    n = (strlen(in)+1)/2;
  else
    n = strlen(in)/2;
  int temp=0,sum=0;
  for(int i=0;i<n;i++)
  {
    temp=in[(i*2)];
    temp = (temp*256) + in[(i*2)+1];
    sum+=temp;
  }
  if(fl==1)
  {
    cout<<"Enter the checksum:- ";
    scanf("%x",&temp);
    sum+=temp;
  }
  if(sum%65535!=0)
  {
    n= sum%65535;
    sum = (sum/ 65535 ) + n;
  }
  sum = 65535-sum;
  printf("%x",sum);
  cout<<endl;
  return sum;
}
int main()
{
  int sum;
  while(1)
  {
    cout<<"Enter corresponding number to performcorresponding operation!!"<<endl;
    cout<<"1.)Encode\n2.)Decode\n3.)Exit\n";
    int choice;
    cout<<"Enter your choice:- ";
    cin>>choice;
    switch (choice)
    {
    case 1:
      cout<<"Enter the string:- ";
      sum = checksum(0);
      printf("Checksum to be appended is :- %x",sum);
      cout<<endl;
      break;
    case 2:
      cout<<"Enter the string :- ";
      sum = checksum(1);
      if(sum!=0)
        cout<<"Error occurred!"<<endl;
      else
        cout<<"No error"<<endl;
    case 3:
      cout<<"Exiting the program"<<endl;
      exit(0);
    default:
      cout<<"ENter valid choice:-\n";
      break;
    }
  }
}